
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compi1.ide.code_analysis;

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\253\000\002\002\004\000\002\077\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\100\003" +
    "\000\002\100\003\000\002\101\003\000\002\101\003\000" +
    "\002\102\003\000\002\102\003\000\002\110\003\000\002" +
    "\110\003\000\002\107\003\000\002\107\003\000\002\106" +
    "\003\000\002\106\003\000\002\103\003\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\104\003\000" +
    "\002\104\003\000\002\002\004\000\002\002\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\004" +
    "\004\000\002\004\002\000\002\005\006\000\002\006\004" +
    "\000\002\007\004\000\002\007\002\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\011\000\002" +
    "\010\011\000\002\010\005\000\002\010\005\000\002\010" +
    "\004\000\002\011\005\000\002\012\004\000\002\013\005" +
    "\000\002\013\002\000\002\014\005\000\002\015\007\000" +
    "\002\016\003\000\002\016\003\000\002\017\004\000\002" +
    "\017\002\000\002\020\004\000\002\020\002\000\002\021" +
    "\007\000\002\022\004\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\024\005\000" +
    "\002\024\002\000\002\025\006\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\027\005\000\002\030\006" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\032\004\000\002\033\006\000\002" +
    "\033\002\000\002\034\013\000\002\035\006\000\002\036" +
    "\004\000\002\037\006\000\002\037\002\000\002\040\013" +
    "\000\002\041\006\000\002\042\004\000\002\043\006\000" +
    "\002\043\002\000\002\044\013\000\002\045\005\000\002" +
    "\045\002\000\002\046\005\000\002\046\005\000\002\047" +
    "\004\000\002\050\005\000\002\050\002\000\002\051\016" +
    "\000\002\052\005\000\002\052\002\000\002\053\014\000" +
    "\002\054\006\000\002\054\002\000\002\055\005\000\002" +
    "\055\002\000\002\056\005\000\002\056\005\000\002\057" +
    "\004\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\002\000\002\061\004\000\002\061\004\000\002" +
    "\061\004\000\002\061\005\000\002\061\005\000\002\061" +
    "\005\000\002\061\005\000\002\062\004\000\002\063\003" +
    "\000\002\063\005\000\002\063\005\000\002\063\005\000" +
    "\002\063\005\000\002\063\005\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\005\000\002\063" +
    "\005\000\002\063\005\000\002\063\005\000\002\063\005" +
    "\000\002\064\005\000\002\064\005\000\002\064\005\000" +
    "\002\064\005\000\002\064\005\000\002\064\005\000\002" +
    "\064\005\000\002\064\005\000\002\064\005\000\002\064" +
    "\005\000\002\064\005\000\002\064\005\000\002\064\005" +
    "\000\002\064\005\000\002\064\005\000\002\064\005\000" +
    "\002\064\005\000\002\064\005\000\002\064\005\000\002" +
    "\064\005\000\002\064\005\000\002\064\005\000\002\065" +
    "\007\000\002\066\006\000\002\067\006\000\002\067\002" +
    "\000\002\070\006\000\002\071\012\000\002\072\004\000" +
    "\002\072\002\000\002\073\003\000\002\073\002\000\002" +
    "\074\006\000\002\075\006\000\002\076\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0180\000\036\004\015\006\036\007\011\010\020\011" +
    "\022\012\021\013\004\014\032\015\024\016\037\017\013" +
    "\020\031\051\023\105\014\001\002\000\004\053\u0179\001" +
    "\002\000\042\002\uffe8\004\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\051\uffe8\052\uffe8\105\uffe8\001\002\000\042" +
    "\002\uffe6\004\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\051\uffe6\052\uffe6\105\uffe6\001\002\000\042\002\uff95\004" +
    "\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95\013\uff95" +
    "\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\051\uff95\052" +
    "\uff95\105\uff95\001\002\000\042\002\uff94\004\uff94\006\uff94" +
    "\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015" +
    "\uff94\016\uff94\017\uff94\020\uff94\051\uff94\052\uff94\105\uff94" +
    "\001\002\000\004\060\u0176\001\002\000\004\051\u0173\001" +
    "\002\000\004\053\u0171\001\002\000\020\062\050\067\u0166" +
    "\070\u0167\071\u016b\072\u0169\073\u016c\074\u016a\001\002\000" +
    "\004\060\u0163\001\002\000\042\002\uffe7\004\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\051\uffe7\052\uffe7\105\uffe7" +
    "\001\002\000\042\002\uff93\004\uff93\006\uff93\007\uff93\010" +
    "\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93" +
    "\017\uff93\020\uff93\051\uff93\052\uff93\105\uff93\001\002\000" +
    "\004\051\u015e\001\002\000\004\053\u015c\001\002\000\004" +
    "\053\u015a\001\002\000\042\004\015\006\036\007\011\010" +
    "\020\011\022\012\021\013\004\014\032\015\024\016\037" +
    "\017\013\020\031\022\uffce\026\223\051\221\105\014\001" +
    "\002\000\004\053\u0151\001\002\000\040\002\uffe4\004\015" +
    "\006\036\007\011\010\020\011\022\012\021\013\004\014" +
    "\032\015\024\016\037\017\013\020\031\051\221\105\014" +
    "\001\002\000\004\051\u0146\001\002\000\044\002\uffe0\004" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\051\uffe0\052" +
    "\uffe0\056\u0143\105\uffe0\001\002\000\004\051\216\001\002" +
    "\000\024\043\056\044\067\045\053\046\064\047\055\050" +
    "\061\103\066\104\057\105\132\001\002\000\004\053\207" +
    "\001\002\000\004\002\206\001\002\000\042\002\uff96\004" +
    "\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96" +
    "\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\051\uff96\052" +
    "\uff96\105\uff96\001\002\000\004\002\uffe9\001\002\000\004" +
    "\060\044\001\002\000\004\053\042\001\002\000\004\057" +
    "\041\001\002\000\042\002\uff97\004\uff97\006\uff97\007\uff97" +
    "\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016" +
    "\uff97\017\uff97\020\uff97\051\uff97\052\uff97\105\uff97\001\002" +
    "\000\004\103\043\001\002\000\044\002\uffda\004\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\051\uffda\052\uffda\056" +
    "\uffda\105\uffda\001\002\000\006\057\uff5c\105\046\001\002" +
    "\000\004\057\122\001\002\000\004\062\050\001\002\000" +
    "\004\057\uff5d\001\002\000\034\043\056\044\067\045\053" +
    "\046\064\047\055\050\061\103\066\104\057\105\052\106" +
    "\071\107\062\110\060\111\063\001\002\000\010\052\uff88" +
    "\057\uff88\061\uff88\001\002\000\022\052\uff7f\057\uff7f\061" +
    "\uff7f\063\114\064\110\065\113\066\111\071\112\001\002" +
    "\000\056\002\000\004\000\006\000\007\000\010\000\011" +
    "\000\012\000\013\000\014\000\015\000\016\000\017\000" +
    "\020\000\051\000\052\000\055\000\056\000\057\000\061" +
    "\000\075\000\076\000\105\000\001\002\000\022\052\uff87" +
    "\057\uff87\061\uff87\063\100\064\074\065\077\066\075\071" +
    "\076\001\002\000\056\002\ufffe\004\ufffe\006\ufffe\007\ufffe" +
    "\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016" +
    "\ufffe\017\ufffe\020\ufffe\051\ufffe\052\ufffe\055\ufffe\056\ufffe" +
    "\057\ufffe\061\ufffe\075\ufffe\076\ufffe\105\ufffe\001\002\000" +
    "\056\002\ufffc\004\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\051\ufffc\052\ufffc\055\ufffc\056\ufffc\057\ufffc\061\ufffc" +
    "\075\ufffc\076\ufffc\105\ufffc\001\002\000\056\002\ufff0\004" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\051\ufff0\052" +
    "\ufff0\055\ufff0\056\ufff0\057\ufff0\061\ufff0\075\ufff0\076\ufff0" +
    "\105\ufff0\001\002\000\014\052\ufffa\057\ufffa\061\ufffa\075" +
    "\ufffa\076\ufffa\001\002\000\056\002\ufffd\004\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\016\ufffd\017\ufffd\020\ufffd\051\ufffd\052\ufffd\055\ufffd" +
    "\056\ufffd\057\ufffd\061\ufffd\075\ufffd\076\ufffd\105\ufffd\001" +
    "\002\000\042\052\ufff5\055\ufff5\056\ufff5\057\ufff5\061\ufff5" +
    "\063\ufff5\064\ufff5\065\ufff5\066\ufff5\071\ufff5\075\ufff5\076" +
    "\ufff5\077\ufff5\100\ufff5\101\ufff5\102\ufff5\001\002\000\014" +
    "\052\ufff9\057\ufff9\061\ufff9\075\ufff9\076\ufff9\001\002\000" +
    "\056\002\uffff\004\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020" +
    "\uffff\051\uffff\052\uffff\055\uffff\056\uffff\057\uffff\061\uffff" +
    "\075\uffff\076\uffff\105\uffff\001\002\000\056\002\uffef\004" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\051\uffef\052" +
    "\uffef\055\uffef\056\uffef\057\uffef\061\uffef\075\uffef\076\uffef" +
    "\105\uffef\001\002\000\056\002\uffed\004\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\020\uffed\051\uffed\052\uffed\055\uffed\056" +
    "\uffed\057\uffed\061\uffed\075\uffed\076\uffed\105\uffed\001\002" +
    "\000\056\002\ufffb\004\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\051\ufffb\052\ufffb\055\ufffb\056\ufffb\057\ufffb\061" +
    "\ufffb\075\ufffb\076\ufffb\105\ufffb\001\002\000\056\002\uffee" +
    "\004\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\051\uffee" +
    "\052\uffee\055\uffee\056\uffee\057\uffee\061\uffee\075\uffee\076" +
    "\uffee\105\uffee\001\002\000\042\052\ufff6\055\ufff6\056\ufff6" +
    "\057\ufff6\061\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\071" +
    "\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6\102\ufff6" +
    "\001\002\000\010\052\uff80\057\uff80\061\uff80\001\002\000" +
    "\010\052\uff81\057\uff81\061\uff81\001\002\000\010\105\103" +
    "\106\071\107\062\001\002\000\010\105\103\106\071\107" +
    "\062\001\002\000\010\105\103\106\071\107\062\001\002" +
    "\000\010\105\103\106\071\107\062\001\002\000\010\105" +
    "\103\106\071\107\062\001\002\000\010\052\uff83\057\uff83" +
    "\061\uff83\001\002\000\014\052\ufff4\055\ufff4\056\ufff4\057" +
    "\ufff4\061\ufff4\001\002\000\014\052\ufff3\055\ufff3\056\ufff3" +
    "\057\ufff3\061\ufff3\001\002\000\010\052\uff84\057\uff84\061" +
    "\uff84\001\002\000\010\052\uff82\057\uff82\061\uff82\001\002" +
    "\000\010\052\uff85\057\uff85\061\uff85\001\002\000\010\052" +
    "\uff86\057\uff86\061\uff86\001\002\000\010\105\103\106\071" +
    "\107\062\001\002\000\010\105\103\106\071\107\062\001" +
    "\002\000\010\105\103\106\071\107\062\001\002\000\010" +
    "\105\103\106\071\107\062\001\002\000\010\105\103\106" +
    "\071\107\062\001\002\000\010\052\uff7b\057\uff7b\061\uff7b" +
    "\001\002\000\010\052\uff7c\057\uff7c\061\uff7c\001\002\000" +
    "\010\052\uff7a\057\uff7a\061\uff7a\001\002\000\010\052\uff7d" +
    "\057\uff7d\061\uff7d\001\002\000\010\052\uff7e\057\uff7e\061" +
    "\uff7e\001\002\000\034\043\056\044\067\045\053\046\064" +
    "\047\055\050\061\103\066\104\057\105\123\106\071\107" +
    "\062\110\060\111\063\001\002\000\016\075\165\076\166" +
    "\077\171\100\164\101\167\102\170\001\002\000\016\075" +
    "\151\076\152\077\155\100\150\101\153\102\154\001\002" +
    "\000\004\057\144\001\002\000\006\075\136\076\137\001" +
    "\002\000\006\075\130\076\131\001\002\000\024\043\056" +
    "\044\067\045\053\046\064\047\055\050\061\103\066\104" +
    "\057\105\132\001\002\000\024\043\056\044\067\045\053" +
    "\046\064\047\055\050\061\103\066\104\057\105\132\001" +
    "\002\000\052\002\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\051\uffeb\052\uffeb\055\uffeb\056\uffeb\057\uffeb" +
    "\061\uffeb\105\uffeb\001\002\000\006\057\uff76\061\uff76\001" +
    "\002\000\052\002\uffec\004\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\051\uffec\052\uffec\055\uffec\056\uffec\057\uffec" +
    "\061\uffec\105\uffec\001\002\000\006\057\uff77\061\uff77\001" +
    "\002\000\010\105\142\110\060\111\063\001\002\000\010" +
    "\105\142\110\060\111\063\001\002\000\006\057\ufff8\061" +
    "\ufff8\001\002\000\006\057\uff78\061\uff78\001\002\000\006" +
    "\057\ufff7\061\ufff7\001\002\000\006\057\uff79\061\uff79\001" +
    "\002\000\006\061\uff5a\105\014\001\002\000\004\061\147" +
    "\001\002\000\004\061\uff5b\001\002\000\004\051\uff5e\001" +
    "\002\000\010\105\103\106\071\107\062\001\002\000\010" +
    "\105\103\106\071\107\062\001\002\000\010\105\103\106" +
    "\071\107\062\001\002\000\010\105\103\106\071\107\062" +
    "\001\002\000\010\105\103\106\071\107\062\001\002\000" +
    "\010\105\103\106\071\107\062\001\002\000\006\057\uff73" +
    "\061\uff73\001\002\000\006\057\uff70\061\uff70\001\002\000" +
    "\006\057\uff71\061\uff71\001\002\000\006\057\uff74\061\uff74" +
    "\001\002\000\006\057\uff75\061\uff75\001\002\000\006\057" +
    "\uff72\061\uff72\001\002\000\010\105\103\106\071\107\062" +
    "\001\002\000\034\043\056\044\067\045\053\046\064\047" +
    "\055\050\061\103\066\104\057\105\201\106\071\107\062" +
    "\110\060\111\063\001\002\000\034\043\056\044\067\045" +
    "\053\046\064\047\055\050\061\103\066\104\057\105\175" +
    "\106\071\107\062\110\060\111\063\001\002\000\010\105" +
    "\103\106\071\107\062\001\002\000\010\105\103\106\071" +
    "\107\062\001\002\000\010\105\103\106\071\107\062\001" +
    "\002\000\006\057\uff67\061\uff67\001\002\000\006\057\uff64" +
    "\061\uff64\001\002\000\006\057\uff65\061\uff65\001\002\000" +
    "\006\057\uff69\061\uff69\001\002\000\006\057\uff6a\061\uff6a" +
    "\001\002\000\006\057\uff68\061\uff68\001\002\000\006\057" +
    "\uff6b\061\uff6b\001\002\000\006\057\uff6d\061\uff6d\001\002" +
    "\000\006\057\uff6e\061\uff6e\001\002\000\006\057\uff6c\061" +
    "\uff6c\001\002\000\006\057\uff6f\061\uff6f\001\002\000\006" +
    "\057\uff66\061\uff66\001\002\000\004\002\001\001\002\000" +
    "\004\051\210\001\002\000\004\011\211\001\002\000\004" +
    "\053\212\001\002\000\024\043\056\044\067\045\053\046" +
    "\064\047\055\050\061\103\066\104\057\105\132\001\002" +
    "\000\004\052\214\001\002\000\044\002\uffdc\004\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\051\uffdc\052\uffdc\056" +
    "\uffdc\105\uffdc\001\002\000\044\002\uffd8\004\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\051\uffd8\052\uffd8\056\uffd8" +
    "\105\uffd8\001\002\000\010\051\221\052\uff90\105\014\001" +
    "\002\000\004\052\uff92\001\002\000\004\052\u0142\001\002" +
    "\000\006\022\uffce\026\223\001\002\000\004\052\uff91\001" +
    "\002\000\004\053\u012d\001\002\000\004\056\u012c\001\002" +
    "\000\004\022\230\001\002\000\004\052\227\001\002\000" +
    "\042\002\uffd3\004\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\051\uffd3\052\uffd3\105\uffd3\001\002\000\004\053\231" +
    "\001\002\000\006\051\236\054\235\001\002\000\006\052" +
    "\uffcc\056\u0129\001\002\000\006\052\uffd1\056\uffd1\001\002" +
    "\000\006\052\uffd0\056\uffd0\001\002\000\004\051\267\001" +
    "\002\000\016\012\242\024\244\025\241\031\243\040\245" +
    "\041\237\001\002\000\004\053\265\001\002\000\004\056" +
    "\260\001\002\000\004\053\256\001\002\000\004\053\254" +
    "\001\002\000\004\053\252\001\002\000\004\053\250\001" +
    "\002\000\004\053\246\001\002\000\024\043\056\044\067" +
    "\045\053\046\064\047\055\050\061\103\066\104\057\105" +
    "\132\001\002\000\004\056\uffbf\001\002\000\010\105\103" +
    "\106\071\107\062\001\002\000\004\056\uffc2\001\002\000" +
    "\024\043\056\044\067\045\053\046\064\047\055\050\061" +
    "\103\066\104\057\105\132\001\002\000\004\056\uffc1\001" +
    "\002\000\024\043\056\044\067\045\053\046\064\047\055" +
    "\050\061\103\066\104\057\105\132\001\002\000\004\056" +
    "\uffc0\001\002\000\004\103\257\001\002\000\004\056\uffbe" +
    "\001\002\000\016\012\242\024\244\025\241\031\243\040" +
    "\245\041\237\001\002\000\004\052\262\001\002\000\006" +
    "\052\uffc3\056\uffc3\001\002\000\004\056\260\001\002\000" +
    "\004\052\uffbc\001\002\000\024\043\056\044\067\045\053" +
    "\046\064\047\055\050\061\103\066\104\057\105\132\001" +
    "\002\000\004\056\uffbd\001\002\000\012\023\276\031\303" +
    "\033\272\035\304\001\002\000\006\055\uffa2\056\u0125\001" +
    "\002\000\004\055\uffba\001\002\000\004\053\u0112\001\002" +
    "\000\004\055\u0111\001\002\000\006\055\uffb4\056\u010c\001" +
    "\002\000\004\055\uffb9\001\002\000\004\053\u0100\001\002" +
    "\000\004\055\uffb8\001\002\000\006\055\uffaf\056\373\001" +
    "\002\000\004\055\uffb7\001\002\000\006\055\uffaa\056\366" +
    "\001\002\000\004\053\352\001\002\000\004\053\305\001" +
    "\002\000\024\043\056\044\067\045\053\046\064\047\055" +
    "\050\061\103\066\104\057\105\132\001\002\000\004\056" +
    "\307\001\002\000\004\036\310\001\002\000\004\053\311" +
    "\001\002\000\004\054\312\001\002\000\004\052\314\001" +
    "\002\000\006\055\uff9f\056\332\001\002\000\004\033\315" +
    "\001\002\000\004\053\316\001\002\000\010\105\103\106" +
    "\071\107\062\001\002\000\004\056\320\001\002\000\004" +
    "\034\321\001\002\000\004\053\322\001\002\000\010\105" +
    "\103\106\071\107\062\001\002\000\006\055\uff9c\056\324" +
    "\001\002\000\004\031\327\001\002\000\004\055\326\001" +
    "\002\000\006\055\uff9e\056\uff9e\001\002\000\004\053\330" +
    "\001\002\000\024\043\056\044\067\045\053\046\064\047" +
    "\055\050\061\103\066\104\057\105\132\001\002\000\004" +
    "\055\uff9d\001\002\000\004\052\314\001\002\000\004\055" +
    "\334\001\002\000\006\052\uff9a\056\335\001\002\000\006" +
    "\025\342\037\340\001\002\000\004\052\337\001\002\000" +
    "\006\055\uffa1\056\uffa1\001\002\000\004\053\346\001\002" +
    "\000\006\052\uff9a\056\335\001\002\000\004\053\343\001" +
    "\002\000\004\103\344\001\002\000\006\052\uff99\056\uff99" +
    "\001\002\000\004\052\uff9b\001\002\000\006\043\056\044" +
    "\067\001\002\000\006\052\uff98\056\uff98\001\002\000\006" +
    "\055\uff9f\056\332\001\002\000\004\055\uffa0\001\002\000" +
    "\024\043\056\044\067\045\053\046\064\047\055\050\061" +
    "\103\066\104\057\105\132\001\002\000\004\056\354\001" +
    "\002\000\004\024\355\001\002\000\004\053\356\001\002" +
    "\000\010\105\103\106\071\107\062\001\002\000\004\056" +
    "\360\001\002\000\004\025\363\001\002\000\004\052\362" +
    "\001\002\000\006\055\uffae\056\uffae\001\002\000\004\053" +
    "\364\001\002\000\004\103\365\001\002\000\004\052\uffad" +
    "\001\002\000\004\051\370\001\002\000\004\055\uffac\001" +
    "\002\000\004\033\272\001\002\000\006\055\uffaa\056\366" +
    "\001\002\000\004\055\uffab\001\002\000\004\051\375\001" +
    "\002\000\004\055\uffb1\001\002\000\004\031\303\001\002" +
    "\000\006\055\uffaf\056\373\001\002\000\004\055\uffb0\001" +
    "\002\000\024\043\056\044\067\045\053\046\064\047\055" +
    "\050\061\103\066\104\057\105\132\001\002\000\004\056" +
    "\u0102\001\002\000\004\024\u0103\001\002\000\004\053\u0104" +
    "\001\002\000\010\105\103\106\071\107\062\001\002\000" +
    "\004\056\u0106\001\002\000\004\025\u0109\001\002\000\004" +
    "\052\u0108\001\002\000\006\055\uffb3\056\uffb3\001\002\000" +
    "\004\053\u010a\001\002\000\004\103\u010b\001\002\000\004" +
    "\052\uffb2\001\002\000\004\051\u010e\001\002\000\004\055" +
    "\uffb6\001\002\000\004\023\276\001\002\000\006\055\uffb4" +
    "\056\u010c\001\002\000\004\055\uffb5\001\002\000\006\052" +
    "\uffbb\056\uffbb\001\002\000\010\105\103\106\071\107\062" +
    "\001\002\000\004\056\u0114\001\002\000\004\034\u0115\001" +
    "\002\000\004\053\u0116\001\002\000\010\105\103\106\071" +
    "\107\062\001\002\000\006\052\uffa7\056\u0118\001\002\000" +
    "\006\025\u011b\042\u011c\001\002\000\004\052\u011a\001\002" +
    "\000\006\055\uffa9\056\uffa9\001\002\000\004\053\u0123\001" +
    "\002\000\004\053\u011f\001\002\000\006\052\uffa7\056\u0118" +
    "\001\002\000\004\052\uffa8\001\002\000\006\105\u0122\106" +
    "\u0120\001\002\000\006\052\ufff2\056\ufff2\001\002\000\006" +
    "\052\uffa6\056\uffa6\001\002\000\006\052\ufff1\056\ufff1\001" +
    "\002\000\004\103\u0124\001\002\000\006\052\uffa5\056\uffa5" +
    "\001\002\000\004\051\u0127\001\002\000\004\055\uffa4\001" +
    "\002\000\004\035\304\001\002\000\004\055\uffa3\001\002" +
    "\000\004\026\223\001\002\000\004\052\uffd2\001\002\000" +
    "\004\052\uffcd\001\002\000\004\022\uffcf\001\002\000\004" +
    "\051\u012e\001\002\000\012\011\u0134\027\u0133\030\u0132\032" +
    "\u0131\001\002\000\004\052\u0141\001\002\000\006\052\uffc4" +
    "\056\u013d\001\002\000\004\053\u013b\001\002\000\004\053" +
    "\u0139\001\002\000\004\053\u0137\001\002\000\004\053\u0135" +
    "\001\002\000\024\043\056\044\067\045\053\046\064\047" +
    "\055\050\061\103\066\104\057\105\132\001\002\000\006" +
    "\052\uffc9\056\uffc9\001\002\000\024\043\056\044\067\045" +
    "\053\046\064\047\055\050\061\103\066\104\057\105\132" +
    "\001\002\000\006\052\uffc8\056\uffc8\001\002\000\024\043" +
    "\056\044\067\045\053\046\064\047\055\050\061\103\066" +
    "\104\057\105\132\001\002\000\006\052\uffc7\056\uffc7\001" +
    "\002\000\012\045\053\046\064\047\055\050\061\001\002" +
    "\000\006\052\uffc6\056\uffc6\001\002\000\012\011\u0134\027" +
    "\u0133\030\u0132\032\u0131\001\002\000\004\052\uffca\001\002" +
    "\000\006\052\uffc4\056\u013d\001\002\000\004\052\uffc5\001" +
    "\002\000\006\052\uffcb\056\uffcb\001\002\000\042\002\uff5f" +
    "\004\uff5f\006\uff5f\007\uff5f\010\uff5f\011\uff5f\012\uff5f\013" +
    "\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f\020\uff5f\051\uff5f" +
    "\052\uff5f\105\uff5f\001\002\000\022\011\022\012\021\013" +
    "\004\014\032\015\024\016\037\017\013\020\031\001\002" +
    "\000\042\002\uffe2\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\051\uffe2\052\uffe2\105\uffe2\001\002\000\042\002" +
    "\uffe1\004\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\051" +
    "\uffe1\052\uffe1\105\uffe1\001\002\000\010\051\221\052\uff90" +
    "\105\014\001\002\000\004\052\u0148\001\002\000\044\002" +
    "\uff60\004\uff60\005\u014a\006\uff60\007\uff60\010\uff60\011\uff60" +
    "\012\uff60\013\uff60\014\uff60\015\uff60\016\uff60\017\uff60\020" +
    "\uff60\051\uff60\052\uff60\105\uff60\001\002\000\042\002\uff63" +
    "\004\uff63\006\uff63\007\uff63\010\uff63\011\uff63\012\uff63\013" +
    "\uff63\014\uff63\015\uff63\016\uff63\017\uff63\020\uff63\051\uff63" +
    "\052\uff63\105\uff63\001\002\000\004\051\u014b\001\002\000" +
    "\010\051\221\052\uff90\105\014\001\002\000\004\052\u014d" +
    "\001\002\000\042\002\uff61\004\uff61\006\uff61\007\uff61\010" +
    "\uff61\011\uff61\012\uff61\013\uff61\014\uff61\015\uff61\016\uff61" +
    "\017\uff61\020\uff61\051\uff61\052\uff61\105\uff61\001\002\000" +
    "\004\002\uffea\001\002\000\042\002\uffe4\004\015\006\036" +
    "\007\011\010\020\011\022\012\021\013\004\014\032\015" +
    "\024\016\037\017\013\020\031\051\221\052\uffe4\105\014" +
    "\001\002\000\006\002\uffe5\052\uffe5\001\002\000\004\051" +
    "\u0152\001\002\000\004\021\u0153\001\002\000\004\053\u0154" +
    "\001\002\000\024\043\056\044\067\045\053\046\064\047" +
    "\055\050\061\103\066\104\057\105\132\001\002\000\004" +
    "\052\u0156\001\002\000\044\002\uffdb\004\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\051\uffdb\052\uffdb\056\uffdb\105" +
    "\uffdb\001\002\000\040\004\015\006\036\007\011\010\020" +
    "\011\022\012\021\013\004\014\032\015\024\016\037\017" +
    "\013\020\031\051\221\052\uffe4\105\014\001\002\000\004" +
    "\052\u0159\001\002\000\004\002\uffe3\001\002\000\024\043" +
    "\056\044\067\045\053\046\064\047\055\050\061\103\066" +
    "\104\057\105\132\001\002\000\044\002\uffdf\004\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\051\uffdf\052\uffdf\056" +
    "\uffdf\105\uffdf\001\002\000\024\043\056\044\067\045\053" +
    "\046\064\047\055\050\061\103\066\104\057\105\132\001" +
    "\002\000\044\002\uffde\004\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\051\uffde\052\uffde\056\uffde\105\uffde\001\002" +
    "\000\010\051\221\052\uff90\105\014\001\002\000\004\052" +
    "\u0160\001\002\000\004\007\011\001\002\000\004\057\u0162" +
    "\001\002\000\042\002\uff57\004\uff57\006\uff57\007\uff57\010" +
    "\uff57\011\uff57\012\uff57\013\uff57\014\uff57\015\uff57\016\uff57" +
    "\017\uff57\020\uff57\051\uff57\052\uff57\105\uff57\001\002\000" +
    "\034\043\056\044\067\045\053\046\064\047\055\050\061" +
    "\103\066\104\057\105\123\106\071\107\062\110\060\111" +
    "\063\001\002\000\004\061\u0165\001\002\000\004\051\uff62" +
    "\001\002\000\010\052\uff8e\057\uff8e\061\uff8e\001\002\000" +
    "\010\052\uff8d\057\uff8d\061\uff8d\001\002\000\010\052\uff8f" +
    "\057\uff8f\061\uff8f\001\002\000\010\105\103\106\071\107" +
    "\062\001\002\000\010\105\103\106\071\107\062\001\002" +
    "\000\010\105\103\106\071\107\062\001\002\000\010\105" +
    "\103\106\071\107\062\001\002\000\010\052\uff8a\057\uff8a" +
    "\061\uff8a\001\002\000\010\052\uff8c\057\uff8c\061\uff8c\001" +
    "\002\000\010\052\uff89\057\uff89\061\uff89\001\002\000\010" +
    "\052\uff8b\057\uff8b\061\uff8b\001\002\000\024\043\056\044" +
    "\067\045\053\046\064\047\055\050\061\103\066\104\057" +
    "\105\132\001\002\000\044\002\uffd9\004\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\051\uffd9\052\uffd9\056\uffd9\105" +
    "\uffd9\001\002\000\010\051\221\052\uff90\105\014\001\002" +
    "\000\004\052\u0175\001\002\000\042\002\uff59\004\uff59\006" +
    "\uff59\007\uff59\010\uff59\011\uff59\012\uff59\013\uff59\014\uff59" +
    "\015\uff59\016\uff59\017\uff59\020\uff59\051\uff59\052\uff59\105" +
    "\uff59\001\002\000\034\043\056\044\067\045\053\046\064" +
    "\047\055\050\061\103\066\104\057\105\123\106\071\107" +
    "\062\110\060\111\063\001\002\000\004\061\u0178\001\002" +
    "\000\006\051\uff58\057\uff58\001\002\000\004\054\u017b\001" +
    "\002\000\044\002\uffdd\004\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\051\uffdd\052\uffdd\056\uffdd\105\uffdd\001\002" +
    "\000\024\043\056\044\067\045\053\046\064\047\055\050" +
    "\061\103\066\104\057\105\132\001\002\000\006\055\uffd4" +
    "\056\u017f\001\002\000\004\055\u017e\001\002\000\044\002" +
    "\uffd7\004\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\051" +
    "\uffd7\052\uffd7\056\uffd7\105\uffd7\001\002\000\024\043\056" +
    "\044\067\045\053\046\064\047\055\050\061\103\066\104" +
    "\057\105\132\001\002\000\004\055\uffd6\001\002\000\006" +
    "\055\uffd4\056\u017f\001\002\000\004\055\uffd5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0180\000\040\002\032\003\024\005\034\006\004\010" +
    "\026\014\015\057\005\061\037\065\033\066\025\070\006" +
    "\071\027\074\007\075\011\076\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\u0167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\u0156\006\004" +
    "\010\026\014\015\015\225\017\224\021\223\057\005\061" +
    "\037\065\033\066\025\070\006\071\027\074\007\075\011" +
    "\076\016\001\001\000\002\001\001\000\036\003\u014e\004" +
    "\u014d\006\004\010\026\014\015\057\005\061\037\065\033" +
    "\066\025\070\006\071\027\074\007\075\011\076\016\001" +
    "\001\000\002\001\001\000\004\007\u0143\001\001\000\002" +
    "\001\001\000\012\077\064\100\067\103\133\104\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\044\001\001\000\002\001\001\000" +
    "\004\062\046\001\001\000\002\001\001\000\016\063\050" +
    "\077\064\100\067\101\071\103\072\110\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\107" +
    "\106\110\101\001\001\000\006\107\105\110\101\001\001" +
    "\000\006\107\104\110\101\001\001\000\006\107\103\110" +
    "\101\001\001\000\006\107\100\110\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\107\120\110\101\001\001\000\006\107\117\110" +
    "\101\001\001\000\006\107\116\110\101\001\001\000\006" +
    "\107\115\110\101\001\001\000\006\107\114\110\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\064\124\077" +
    "\064\100\067\101\125\103\126\110\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\077\064\100\067\103\133" +
    "\104\134\001\001\000\012\077\064\100\067\103\133\104" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\101\137\102\142\001" +
    "\001\000\006\101\137\102\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\061\145\073\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\107\162\110\101\001" +
    "\001\000\006\107\161\110\101\001\001\000\006\107\160" +
    "\110\101\001\001\000\006\107\157\110\101\001\001\000" +
    "\006\107\156\110\101\001\001\000\006\107\155\110\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\107\204\110\101\001\001\000\014\077\064\100" +
    "\067\101\202\103\203\110\201\001\001\000\014\077\064" +
    "\100\067\101\176\103\177\110\175\001\001\000\006\107" +
    "\173\110\101\001\001\000\006\107\172\110\101\001\001" +
    "\000\006\107\171\110\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\077\064\100\067" +
    "\103\133\104\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\216\060\217\061\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\225\017\224\021\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\231" +
    "\025\233\030\232\001\001\000\004\020\u0129\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\237\001\001\000\002\001\001\000\004\027\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\077\064\100" +
    "\067\103\133\104\246\001\001\000\002\001\001\000\006" +
    "\107\250\110\101\001\001\000\002\001\001\000\012\077" +
    "\064\100\067\103\133\104\252\001\001\000\002\001\001" +
    "\000\012\077\064\100\067\103\133\104\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\263\001\001\000\002\001\001\000\012\077\064" +
    "\100\067\103\133\104\265\001\001\000\002\001\001\000" +
    "\024\031\272\032\270\034\273\036\274\040\277\042\276" +
    "\044\301\047\300\051\267\001\001\000\004\050\u0125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\u010c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\373\001\001\000\002" +
    "\001\001\000\004\043\366\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\077\064\100\067\103\133\104\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\312\001\001\000\004" +
    "\052\332\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\107\316\110\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\107\322\110\101\001" +
    "\001\000\004\054\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\077" +
    "\064\100\067\103\133\104\330\001\001\000\002\001\001" +
    "\000\004\053\347\001\001\000\002\001\001\000\004\055" +
    "\335\001\001\000\004\056\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\344\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\100\346\001\001\000\002\001" +
    "\001\000\004\052\350\001\001\000\002\001\001\000\012" +
    "\077\064\100\067\103\133\104\352\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\107\356" +
    "\110\101\001\001\000\004\041\360\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\370\001\001\000\004\043\371" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\375\001\001\000\004\037\376\001\001" +
    "\000\002\001\001\000\012\077\064\100\067\103\133\104" +
    "\u0100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\107\u0104\110\101\001\001\000\004\035" +
    "\u0106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\u010e" +
    "\001\001\000\004\033\u010f\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\107\u0112\110\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\107" +
    "\u0116\110\101\001\001\000\004\045\u0118\001\001\000\004" +
    "\046\u011c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\u011d\001\001" +
    "\000\002\001\001\000\004\106\u0120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\u0127\001\001\000\002\001\001\000\004\021\u012a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\u012e\023\u012f\001\001" +
    "\000\002\001\001\000\004\024\u013d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\077\064\100\067\103\133\104\u0135\001\001\000" +
    "\002\001\001\000\012\077\064\100\067\103\133\104\u0137" +
    "\001\001\000\002\001\001\000\012\077\064\100\067\103" +
    "\133\104\u0139\001\001\000\002\001\001\000\004\077\u013b" +
    "\001\001\000\002\001\001\000\004\023\u013e\001\001\000" +
    "\002\001\001\000\004\024\u013f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\u0144\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\216" +
    "\060\u0146\061\221\001\001\000\002\001\001\000\004\067" +
    "\u0148\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\216\060\u014b\061\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\u014e\004\u014f" +
    "\006\004\010\026\014\015\057\005\061\037\065\033\066" +
    "\025\070\006\071\027\074\007\075\011\076\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\077\064\100\067\103\133\104\u0154" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\u014e\004\u0157\006\004\010\026\014\015\057\005\061\037" +
    "\065\033\066\025\070\006\071\027\074\007\075\011\076" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\077\064\100\067\103\133\104\u015a\001\001\000\002\001" +
    "\001\000\012\077\064\100\067\103\133\104\u015c\001\001" +
    "\000\002\001\001\000\010\014\216\060\u015e\061\221\001" +
    "\001\000\002\001\001\000\004\075\u0160\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\064\u0163\077\064\100" +
    "\067\101\125\103\126\110\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\107\u016f\110\101\001\001\000\006" +
    "\107\u016e\110\101\001\001\000\006\107\u016d\110\101\001" +
    "\001\000\006\107\u016c\110\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\077\064\100\067\103\133\104\u0171\001\001\000\002" +
    "\001\001\000\010\014\216\060\u0173\061\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\064\u0176\077\064" +
    "\100\067\101\125\103\126\110\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0179\001\001\000\002" +
    "\001\001\000\014\012\u017c\077\064\100\067\103\133\104" +
    "\u017b\001\001\000\004\013\u017f\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\077\064\100\067\103\133\104" +
    "\u0180\001\001\000\002\001\001\000\004\013\u0181\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //fields
    Lexer lex;
    private List<String> errors;


    //conect the parser with the lexer
    public parser(Lexer lex){
        super(lex);
        errors = new LinkedList<>();
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getErrors(){
        return this.errors;
    }

    /*----------------------------------------------------
                        METODOS DE ERROR
    ------------------------------------------------------*/
    public void syntax_error(Symbol cur_token) {
        String mss = "Simbolo: " + symbl_name_from_id(cur_token.sym)
                    + ", linea: " + cur_token.left
                    + ", columna: " + cur_token.right;
        if (expected_token_ids().isEmpty()) {
            mss += " -- ya no se esperaba ningun simbolo";
        }
        errors.add(mss);
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        errors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instruction EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // align_specification ::= BOTTOM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("align_specification",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // align_specification ::= TOP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("align_specification",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // align_specification ::= RIGHT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("align_specification",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // align_specification ::= LEFT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("align_specification",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lines_style_attr ::= DASHED_LINE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lines_style_attr",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lines_style_attr ::= SOLID_LINE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lines_style_attr",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pure_boolean_data ::= TRUE_B 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pure_boolean_data",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // pure_boolean_data ::= FALSE_B 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pure_boolean_data",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // boolean_data ::= pure_boolean_data 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_data",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // boolean_data ::= VARIABLE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_data",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // pure_numeric_data ::= INTEGER 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pure_numeric_data",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // pure_numeric_data ::= FLOAT 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pure_numeric_data",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // numeric_data ::= pure_numeric_data 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_data",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // numeric_data ::= VARIABLE 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_data",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // numeric_integer_data ::= INTEGER 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_integer_data",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // numeric_integer_data ::= VARIABLE 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric_integer_data",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // pure_string_data ::= STRING 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pure_string_data",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // pure_string_data ::= align_specification 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pure_string_data",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // pure_string_data ::= lines_style_attr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pure_string_data",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // pure_string_data ::= HEX_COLOR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pure_string_data",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // string_data ::= pure_string_data 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_data",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // string_data ::= VARIABLE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_data",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruction ::= code_inst more_code 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruction ::= with_llaves 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // code_inst ::= global_specification 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // code_inst ::= chart_creation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // code_inst ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // more_code ::= code_inst more_code 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_code",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // more_code ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_code",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // with_llaves ::= LLAVE_L code_inst more_code LLAVE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("with_llaves",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // global_specification ::= global_single_specification more_global_specifications 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_specification",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // more_global_specifications ::= COMA global_single_specification 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_global_specifications",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // more_global_specifications ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_global_specifications",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // global_single_specification ::= TITLE TWO_DOTS string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_single_specification",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // global_single_specification ::= DESCRIPTION TWO_DOTS string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_single_specification",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // global_single_specification ::= KEYWORDS TWO_DOTS keywords_specification 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_single_specification",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // global_single_specification ::= HEADER TWO_DOTS LLAVE_L TITLE TWO_DOTS string_data LLAVE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_single_specification",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // global_single_specification ::= FOOTER TWO_DOTS LLAVE_L COPYRIGHT TWO_DOTS string_data LLAVE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_single_specification",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // global_single_specification ::= BACKGROUND TWO_DOTS HEX_COLOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_single_specification",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // global_single_specification ::= FONT_FAMILY TWO_DOTS string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_single_specification",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // global_single_specification ::= FONT_SIZE string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_single_specification",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // keywords_specification ::= CORCHETE_L keywords_names CORCHETE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keywords_specification",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // keywords_names ::= string_data more_key_words 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keywords_names",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // more_key_words ::= COMA string_data more_key_words 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_key_words",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // more_key_words ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_key_words",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // chart_creation ::= LLAVE_L elements_chart LLAVE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chart_creation",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // elements_chart ::= leyend_chart_op DATA TWO_DOTS specification_data leyend_chart_op_f 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elements_chart",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // specification_data ::= data_chart 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification_data",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // specification_data ::= information_target 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification_data",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // leyend_chart_op ::= leyend_chart COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leyend_chart_op",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // leyend_chart_op ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leyend_chart_op",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // leyend_chart_op_f ::= COMA leyend_chart 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leyend_chart_op_f",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // leyend_chart_op_f ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leyend_chart_op_f",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // leyend_chart ::= CHART TWO_DOTS LLAVE_L specifications_leyend LLAVE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leyend_chart",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // specifications_leyend ::= specification more_specifications 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specifications_leyend",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // specification ::= TITLE TWO_DOTS string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // specification ::= X_AXIS_L TWO_DOTS string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // specification ::= Y_AXIS_L TWO_DOTS string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // specification ::= LEGEND_POS TWO_DOTS align_specification 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specification",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // more_specifications ::= COMA specification more_specifications 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_specifications",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // more_specifications ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_specifications",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // information_target ::= LLAVE_L data_target more_data_target LLAVE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("information_target",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // data_target ::= VALUE TWO_DOTS numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_target",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // data_target ::= LABEL TWO_DOTS string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_target",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // data_target ::= DESCRIPTION TWO_DOTS string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_target",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // data_target ::= ICON TWO_DOTS string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_target",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // data_target ::= COLOR TWO_DOTS HEX_COLOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_target",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // data_target ::= LINK TWO_DOTS string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_target",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // more_data_target ::= COMA data_target more_data_target 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_data_target",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // data_chart ::= CORCHETE_L LLAVE_L specific_chart_data CORCHETE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("data_chart",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // specific_chart_data ::= chart_barras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specific_chart_data",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // specific_chart_data ::= chart_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specific_chart_data",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // specific_chart_data ::= chart_points 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specific_chart_data",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // specific_chart_data ::= chart_lines 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specific_chart_data",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // chart_barras ::= value_chart_barras more_values_barras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chart_barras",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // more_values_barras ::= COMA LLAVE_L value_chart_barras more_values_barras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_values_barras",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // more_values_barras ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_values_barras",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // value_chart_barras ::= CATEGORY TWO_DOTS string_data COMA VALUE TWO_DOTS numeric_data optional_color_b LLAVE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value_chart_barras",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // optional_color_b ::= COMA COLOR TWO_DOTS HEX_COLOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_color_b",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // chart_pie ::= value_chart_pie more_values_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chart_pie",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // more_values_pie ::= COMA LLAVE_L value_chart_pie more_values_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_values_pie",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // more_values_pie ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_values_pie",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // value_chart_pie ::= LABEL TWO_DOTS string_data COMA VALUE TWO_DOTS numeric_data optional_color_pie LLAVE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value_chart_pie",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // optional_color_pie ::= COMA COLOR TWO_DOTS HEX_COLOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_color_pie",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // chart_points ::= value_chart_points more_values_points 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chart_points",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // more_values_points ::= COMA LLAVE_L value_chart_points more_values_points 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_values_points",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // more_values_points ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_values_points",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // value_chart_points ::= X_DATA TWO_DOTS numeric_data COMA Y_DATA TWO_DOTS numeric_data optional_point_c_data LLAVE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value_chart_points",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // optional_point_c_data ::= COMA options_pointc optional_point_c_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_point_c_data",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // optional_point_c_data ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_point_c_data",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // options_pointc ::= SIZE TWO_DOTS numeric_integer_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("options_pointc",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // options_pointc ::= COLOR TWO_DOTS HEX_COLOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("options_pointc",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // chart_lines ::= value_chart_lines more_values_lines 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chart_lines",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // more_values_lines ::= COMA LLAVE_L value_chart_lines 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_values_lines",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // more_values_lines ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_values_lines",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // value_chart_lines ::= NAME TWO_DOTS string_data COMA POINTS TWO_DOTS CORCHETE_L specific_data_line more_specific_data_line CORCHETE_R optional_values_lines LLAVE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value_chart_lines",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // more_specific_data_line ::= COMA specific_data_line more_specific_data_line 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_specific_data_line",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // more_specific_data_line ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_specific_data_line",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // specific_data_line ::= LLAVE_R X_DATA TWO_DOTS numeric_data COMA Y_DATA TWO_DOTS numeric_data optional_data_lines CORCHETE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("specific_data_line",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // optional_data_lines ::= COMA LABEL TWO_DOTS string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_data_lines",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // optional_data_lines ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_data_lines",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // optional_values_lines ::= COMA optional_attribute_linec optional_values_lines 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_values_lines",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // optional_values_lines ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_values_lines",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // optional_attribute_linec ::= COLOR TWO_DOTS HEX_COLOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_attribute_linec",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // optional_attribute_linec ::= LINE_STYLE TWO_DOTS lines_style_attr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_attribute_linec",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // statement ::= variable_statement DOT_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // statement ::= if_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // statement ::= for_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // statement ::= while_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // statement ::= do_while_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // internal_block ::= chart_creation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("internal_block",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // internal_block ::= variable_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("internal_block",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // internal_block ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("internal_block",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // variable_statement ::= VARIABLE asignation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // variable_statement ::= VARIABLE PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // variable_statement ::= VARIABLE MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // variable_statement ::= VARIABLE PLUS_EQUALS numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // variable_statement ::= VARIABLE MINUS_EQUALS numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // variable_statement ::= VARIABLE TIMES_EQUALS numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // variable_statement ::= VARIABLE DIV_EQUALS numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // asignation ::= ASIGNATOR possible_values 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignation",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // possible_values ::= pure_numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // possible_values ::= pure_numeric_data PLUS numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // possible_values ::= pure_numeric_data MINUS numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // possible_values ::= pure_numeric_data DIV numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // possible_values ::= pure_numeric_data TIMES numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // possible_values ::= pure_numeric_data PLUS_EQUALS numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // possible_values ::= pure_string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // possible_values ::= pure_boolean_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // possible_values ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // possible_values ::= VARIABLE PLUS numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // possible_values ::= VARIABLE MINUS numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // possible_values ::= VARIABLE DIV numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // possible_values ::= VARIABLE TIMES numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // possible_values ::= VARIABLE PLUS_EQUALS numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("possible_values",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // condition ::= pure_boolean_data EQUALS boolean_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // condition ::= pure_boolean_data DIFFERENT boolean_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // condition ::= pure_string_data EQUALS string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // condition ::= pure_string_data DIFFERENT string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // condition ::= pure_numeric_data EQUALS numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // condition ::= pure_numeric_data DIFFERENT numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // condition ::= pure_numeric_data MAYOR numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // condition ::= pure_numeric_data MAYOR_EQUALS numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // condition ::= pure_numeric_data MENOR numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // condition ::= pure_numeric_data MENOR_EQUALS numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // condition ::= VARIABLE EQUALS pure_string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // condition ::= VARIABLE EQUALS pure_numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // condition ::= VARIABLE EQUALS VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // condition ::= VARIABLE EQUALS pure_boolean_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // condition ::= VARIABLE DIFFERENT pure_string_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // condition ::= VARIABLE DIFFERENT pure_numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // condition ::= VARIABLE DIFFERENT VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // condition ::= VARIABLE DIFFERENT pure_boolean_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // condition ::= VARIABLE MAYOR numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // condition ::= VARIABLE MAYOR_EQUALS numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // condition ::= VARIABLE MENOR numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // condition ::= VARIABLE MENOR_EQUALS numeric_data 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // if_block ::= if_stmt LLAVE_L internal_block LLAVE_R else_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_block",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // if_stmt ::= IF PARENTESIS_L condition PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // else_block ::= ELSE LLAVE_L internal_block LLAVE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // else_block ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // for_block ::= for_stmt LLAVE_L internal_block LLAVE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_block",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // for_stmt ::= FOR PARENTESIS_L variable_definition DOT_COMA condition DOT_COMA optional_increment PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // variable_definition ::= VARIABLE asignation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_definition",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // variable_definition ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_definition",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // optional_increment ::= variable_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_increment",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // optional_increment ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("optional_increment",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // while_block ::= while_statement LLAVE_L internal_block LLAVE_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_block",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // while_statement ::= WHILE PARENTESIS_L condition PARENTESIS_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // do_while_block ::= DO LLAVE_L internal_block LLAVE_R while_statement DOT_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while_block",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
